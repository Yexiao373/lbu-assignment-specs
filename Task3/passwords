def read_password_file(file_path):
    """
    Reads the password file and returns a dictionary where the keys are usernames
    and the values are tuples (real_name, encrypted_password).
    """
    user_data = {}
    with open(file_path, 'r') as file:
        for line in file:
            username, real_name, encrypted_password = line.strip().split(':')
            user_data[username] = (real_name, encrypted_password)
    return user_data

def write_password_file(file_path, user_data):
    """
    Writes the user data dictionary to the password file.
    """
    with open(file_path, 'w') as file:
        for username, (real_name, encrypted_password) in user_data.items():
            file.write(f"{username}:{real_name}:{encrypted_password}\n")

def encrypt_password(password):
    """
    A simple ROT-13 encryption for demonstration purposes.
    """
    return password.encode('rot_13')

def add_user(file_path):
    """
    Adds a new user entry to the password file.
    """
    user_data = read_password_file(file_path)

    # Prompt user for input
    new_username = input("Enter new username: ")
    new_real_name = input("Enter real name: ")
    new_password = input("Enter password: ")

    # Check if username already exists
    if new_username in user_data:
        print("Cannot add. Most likely username already exists.")
    else:
        # Encrypt the password
        encrypted_password = encrypt_password(new_password)
        user_data[new_username] = (new_real_name, encrypted_password)
        write_password_file(file_path, user_data)
        print("User Created.")

# Example usage
add_user("passwd.txt")
